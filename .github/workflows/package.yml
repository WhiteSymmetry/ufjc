name: package
on:
  push:
    branches: [ anaconda-upload ]
  pull_request:
    branches: [ anaconda-upload ]
  # push:
  #   tags:
  #     - '*'
  workflow_dispatch:
env:
  REPO_NAME: ${{ github.event.repository.name }}
jobs:
  get-version:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - id: version
        run: |
          export VERSION=$(grep version setup.py | cut -f2 -d "'")
          echo "::set-output name=VERSION::${VERSION}"
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
  # pypi:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install --upgrade setuptools 
  #         pip install wheel twine
  #     - name: Make tarball
  #       run: python setup.py sdist
  #     - name: Make wheel
  #       run: python setup.py bdist_wheel
  #     - name: Upload to PyPI.org
  #       run: twine upload -u __token__ -p ${{ secrets.PYPI_TOKEN }} dist/*
  #     - name: Give upload time before downloading
  #       run: sleep 88s
  # test-pypi:
  #   runs-on: ubuntu-20.04
  #   needs: [get-version, pypi]
  #   steps:
  #     - name: Install and test the package
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install ${REPO_NAME}==${{ needs.get-version.outputs.VERSION }}
  #         python -m ${REPO_NAME}.tests
  anaconda:
    runs-on: ubuntu-20.04
    # needs: [get-version, pypi]
    needs: get-version
    steps:
      - uses: actions/checkout@v2
      - name: Prepare conda
        run: |
          rm -rf ${REPO_NAME}
          conda update conda
          conda install anaconda-client conda-build
      - name: Create conda recipe from PyPI
        run: conda skeleton pypi --noarch-python ${REPO_NAME}
      - name: Build conda packages
        run: conda build --python 3.8 ${REPO_NAME}
      - name: Translate README.rst to .md for description
        run: |
          sudo apt install -y pandoc
          pandoc -s -o README.md README.rst
      - name: Upload to Anaconda.org
        run: |
          PATH="/usr/share/miniconda/bin/:$PATH"
          anaconda login --username ${{ secrets.ANACONDA_USERNAME }} --password ${{ secrets.ANACONDA_PASSWORD }}
          anaconda upload --force -d "this is a test \n test1 \n\n test2" /usr/share/miniconda/conda-bld/noarch/${REPO_NAME}*.tar.bz2
          anaconda logout
      - name: Give upload time before downloading
        run: sleep 88s
  test-anaconda:
    runs-on: ubuntu-20.04
    # needs: [get-version, pypi, anaconda]
    needs: [get-version, anaconda]
    steps:
      - name: Install the package
        run: conda install --channel mrbuche ${REPO_NAME}==${{ needs.get-version.outputs.VERSION }}
      - name: Test the package
        run: |
          conda init
          conda list
          PATH="/usr/share/miniconda/bin/:$PATH"
          python -m ${REPO_NAME}.tests
  # docker:
  #   runs-on: ubuntu-20.04
  #   needs: [get-version, pypi]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Translate README.rst to .md for description
  #       run: |
  #         sudo apt install -y pandoc
  #         pandoc -s -o README.md README.rst
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1.12.0
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build Docker and push to Dockerhub
  #       uses: docker/build-push-action@v2.8.0
  #       with:
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
  #           ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ needs.get-version.outputs.VERSION }}
  #     - name: Give upload time before downloading
  #       run: sleep 88s
  # test-docker:
  #   runs-on: ubuntu-20.04
  #   needs: docker
  #   container: mrbuche/ufjc
  #   steps:
  #     - name: Test the package
  #       run: |
  #         python -m ${REPO_NAME}.tests
